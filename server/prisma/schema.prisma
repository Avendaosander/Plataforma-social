generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  password       String
  recoveryCode   String   @default("")
  description    String   @default("")
  avatar         String   @default("")
  subscriptionWP String   @default("") @db.VarChar(500)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Setting    Setting?
  Post       Post[]
  Comment    Comment[]
  Rating     Rating[]
  followers  Follower[]     @relation("UserFollowers")
  following  Follower[]     @relation("UserFollowing")
  Post_saved Post_saved[]
  user       Notification[] @relation("User")
  userSend   Notification[] @relation("UserSend")
}

model Setting {
  idSetting           String  @id @default(uuid())
  user                User    @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser              String  @unique
  n_ratings           Boolean @default(true)
  n_comments          Boolean @default(true)
  n_followers         Boolean @default(true)
  n_populates         Boolean @default(true)
  n_new_post          Boolean @default(true)
  n_edit_post         Boolean @default(true)
  n_delete_post       Boolean @default(true)
  n_email_ratings     Boolean @default(true)
  n_email_comments    Boolean @default(true)
  n_email_followers   Boolean @default(true)
  n_email_new_post    Boolean @default(true)
  n_email_edit_post   Boolean @default(true)
  n_email_delete_post Boolean @default(true)
}

model Post {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser      String
  title       String
  description String
  preview     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Comment    Comment[]
  Stack      Stack[]
  Rating     Rating[]
  File       File[]
  Post_saved Post_saved[]
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost    String
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser    String
  text      String
  createdAt DateTime @default(now())
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  Stack Stack[]
}

model Stack {
  idPost       String
  post         Post       @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idTechnology String
  tech         Technology @relation(fields: [idTechnology], references: [id], onDelete: Cascade)

  @@id([idPost, idTechnology])
}

model Rating {
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost    String
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser    String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([idPost, idUser])
}

model Follower {
  follower   User   @relation("UserFollowers", fields: [idFollower], references: [id], onDelete: Cascade)
  idFollower String

  following   User   @relation("UserFollowing", fields: [idFollowing], references: [id], onDelete: Cascade)
  idFollowing String

  createdAt DateTime @default(now())

  @@id([idFollower, idFollowing])
}

model File {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost String
  file   String
}

model Post_saved {
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser    String
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost    String
  createdAt DateTime @default(now())

  @@id([idPost, idUser])
}

model Notification {
  id         String   @id @default(uuid())
  user       User     @relation("User", fields: [idUser], references: [id], onDelete: Cascade)
  idUser     String
  userSend   User     @relation("UserSend", fields: [idUserSend], references: [id], onDelete: Cascade)
  idUserSend String
  message    String
  link       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
