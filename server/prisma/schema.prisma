generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  password    String
  description String   @default("")
  avatar      String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Setting      Setting?
  Post         Post[]
  Comment      Comment[]
  Rating       Rating[]
  followers    Follower[]     @relation("UserFollowers")
  following    Follower[]     @relation("UserFollowing")
  Post_saved   Post_saved[]
  Notification Notification[]
}

model Setting {
  idSetting         String  @id @default(uuid())
  user              User    @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser            String  @unique
  private           Boolean @default(false)
  n_ratings         Boolean @default(true)
  n_comments        Boolean @default(true)
  n_followers       Boolean @default(true)
  n_populates       Boolean @default(true)
  n_email_ratings   Boolean @default(true)
  n_email_comments  Boolean @default(true)
  n_email_followers Boolean @default(true)
}

model Post {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser      String
  title       String
  description String
  preview     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Comment    Comment[]
  Stack      Stack[]
  Rating     Rating[]
  File       File[]
  Post_saved Post_saved[]
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost    String
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser    String
  text      String
  createdAt DateTime @default(now())
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  Stack Stack[]
}

model Stack {
  idPost       String
  post         Post       @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idTechnology String
  tech         Technology @relation(fields: [idTechnology], references: [id], onDelete: Cascade)

  @@id([idPost, idTechnology])
}

model Rating {
  post   Post   @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost String
  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser String
  rating Float

  @@id([idPost, idUser])
}

model Follower {
  follower   User   @relation("UserFollowers", fields: [idFollower], references: [id])
  idFollower String

  following   User   @relation("UserFollowing", fields: [idFollowing], references: [id])
  idFollowing String

  @@id([idFollower, idFollowing])
}

model File {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost String
  file   String
}

model Post_saved {
  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser String
  post   Post   @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idPost String

  @@id([idPost, idUser])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
